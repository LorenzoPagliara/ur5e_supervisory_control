/* -------------------------------------------------------------------
 *
 * This module has been developed by the Automatic Control Group
 * of the University of Salerno, Italy.
 *
 * Title:   task_space_reference_generator.hpp
 * Author:  Davide Risi
 * Org.:    UNISA
 * Date:    Nov 18, 2024
 *
 * This class implements a task space reference generator based on
 * ros_control.
 *
 * -------------------------------------------------------------------
 */

#pragma once

#include <string>
#include <memory>

#include <controller_interface/controller_interface.hpp>
#include <kinematics_interface/kinematics_interface.hpp>
#include <geometry_msgs/msg/transform_stamped.hpp>
#include <geometry_msgs/msg/wrench_stamped.hpp>
#include <rclcpp_action/rclcpp_action.hpp>
#include <realtime_tools/realtime_buffer.hpp>
#include <realtime_tools/realtime_publisher.hpp>

#include <acg_control_msgs/msg/task_space_trajectory_point.hpp>
#include <acg_control_msgs/action/follow_task_space_trajectory.hpp>
#include <acg_common_libraries/kinematics.hpp>
#include <acg_hardware_interface_facade/command_writer.hpp>

// auto-generated by generate_parameter_library
#include "reference_generator/task_space_reference_generator_parameters.hpp"

#include "reference_generator/visibility_control.h"
#include "reference_generator/reference_generator.hpp"

namespace task_space_reference_generator
{

/**
 * @brief Struct that handles the trajectory information of the task space trajectory.
 *
 * The struct inherits from the TrajectoryInfo struct of the base class.
 * The goal_handle_ field is used to store the goal handle of the action server that is executing the trajectory.
 */
struct TaskSpaceTrajectoryInfo : public reference_generator::TrajectoryInfo
{
  std::shared_ptr<rclcpp_action::ServerGoalHandle<acg_control_msgs::action::FollowTaskSpaceTrajectory>> goal_handle_{ nullptr };
};

/**
 * @class ReferenceGenerator
 * @brief reference generator handling task space trajectories and online task space references.
 *
 * This class extends the reference_generator::ReferenceGenerator base class.
 * It manages trajectory execution, including trajectory points, feedback, and the action server for task space trajectories.
 * In addition, it provides methods for handling trajectory points online via topic.
 * For details on the overridden methods, refer to the documentation of the base class reference_generator::ReferenceGenerator.
 */
class TaskSpaceReferenceGenerator : public reference_generator::ReferenceGenerator
{
public:
  REFERENCE_GENERATOR_PUBLIC
  TaskSpaceReferenceGenerator();

  REFERENCE_GENERATOR_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  REFERENCE_GENERATOR_PUBLIC
  controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State& previous_state) override;

  REFERENCE_GENERATOR_PUBLIC
  controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State& previous_state) override;

  REFERENCE_GENERATOR_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

protected:
  // Overriden methods from the base class. See ReferenceGenerator class for more information.
  void abort_trajectory(const std::string& error_string) override;
  void read_references_from_non_rt() override;
  void write_references_to_command_interfaces() override;
  void calculate_and_publish_feedback(const rclcpp::Time& time) override;
  std::size_t get_next_trajectory_index() override;
  bool update_next_reference_from_trajectory() override;
  void handle_trajectory_completed() override;
  void publish_reference_pose(const rclcpp::Time& time) override;
  void read_trajectory_info_from_non_rt() override;

  /**
   * @brief Callback function for handling the task space trajectory received from the user via a topic
   *
   * Refer to the documentation of the action server for more details about the parameters.
   */
  rclcpp_action::GoalResponse handle_goal_(const rclcpp_action::GoalUUID& uuid,
                                           std::shared_ptr<const acg_control_msgs::action::FollowTaskSpaceTrajectory::Goal> goal);

  /**
   * @brief Callback function for handling the cancellation of task space trajectory received from the user via a topic
   *
   * Refer to the documentation of the action server for more details about the parameters.
   */
  rclcpp_action::CancelResponse
  handle_cancel_(const std::shared_ptr<rclcpp_action::ServerGoalHandle<acg_control_msgs::action::FollowTaskSpaceTrajectory>> goal_handle);

  /**
   * @brief Callback function for handling the acceptance of task space trajectory received from the user via a topic
   *
   * Refer to the documentation of the action server for more details about the parameters.
   */
  void handle_accepted_(const std::shared_ptr<rclcpp_action::ServerGoalHandle<acg_control_msgs::action::FollowTaskSpaceTrajectory>> goal_handle);

  /**
   * @brief Callback function for handling the task space reference received from the user via a topic
   *
   * This function stores the task space reference received via topic in the real-time buffer so that the controller
   * can command it in a real-time loop.
   *
   * @param[in] msg The task space reference message received from the user
   */
  void task_space_reference_callback_(const std::shared_ptr<acg_control_msgs::msg::TaskSpacePoint> msg);

  /**
   * @brief Returns the task space error between the reference and the actual robot state in the task space.
   *
   * @param[in] feedback The feedback message to be sent to the user.
   * @return The task space error between the reference and the actual robot state in the task space.
   */
  static acg_control_msgs::msg::TaskSpacePoint
  compute_task_space_error_(const std::shared_ptr<acg_control_msgs::action::FollowTaskSpaceTrajectory::Feedback>& feedback);

  /**
   * @brief Verifies that the provided motion and wrench frame names exist in the robot description, otherwise logs an error message.
   *
   * @param[in] motion_frame The name of the motion reference frame to verify.
   * @param[in] wrench_frame The name of the wrench reference frame to verify.
   * @return true if both frame names are found in the robot description, false otherwise.
   */
  bool verify_frame_names_(const std::string& motion_frame, const std::string& wrench_frame) const;

  // Pointer to the ParamListener object that handles the parameters for the controller
  std::shared_ptr<task_space_reference_generator::ParamListener> parameter_handler_;

  // Subscription for handling the task space reference received from the user via a topic
  rclcpp::Subscription<acg_control_msgs::msg::TaskSpacePoint>::SharedPtr task_space_reference_subscriber_;

  // Real-time buffer for the task space command
  realtime_tools::RealtimeBuffer<std::shared_ptr<acg_control_msgs::msg::TaskSpacePoint>> task_space_reference_buffer_;

  // Action server and action goal for handling the task space trajectory action received from the user
  rclcpp_action::Server<acg_control_msgs::action::FollowTaskSpaceTrajectory>::SharedPtr task_space_trajectory_action_server_;

  // Helper class for writing the task space reference to the command interfaces
  acg_hardware_interface_facade::CommandWriter command_writer_;

  // Internal variables to store the task space reference
  acg_control_msgs::msg::TaskSpacePoint task_space_reference_;

  // Internal variables to store the actual robot state in the task space
  acg_control_msgs::msg::TaskSpacePoint robot_actual_task_space_state_;

  // Internal time used to decide which task trajectory waypoint to command depending on its timestamp
  realtime_tools::RealtimeBuffer<TaskSpaceTrajectoryInfo> trajectory_info_buffer_;

  // Internal variable to store the current state of the trajectory
  TaskSpaceTrajectoryInfo trajectory_info_;

  // Convenience typedef for the feedback message of the action server
  typedef acg_control_msgs::action::FollowTaskSpaceTrajectory::Feedback TaskSpaceTrajFeedback;

  // Feedback message for the task space trajectory action. For real-time safety, the feedback message is pre-allocated in the on_configure method.
  std::shared_ptr<TaskSpaceTrajFeedback> feedback_;

  // Internal variable to handle the trajectory points
  acg_control_msgs::msg::TaskSpaceTrajectoryPoint current_traj_point_;
  acg_control_msgs::msg::TaskSpaceTrajectoryPoint next_traj_point_;

  // Internal variable that handles the computation of the forward kinematics of the robot
  acg_kinematics::RTKinematicsSolver robot_kinematics_;
};

}  // namespace task_space_reference_generator
